<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
    This is the main server configuration file

    ${carbon.home} represents the carbon.home system property.
    Other system properties can be specified in a similar manner.
-->
<Server xmlns="http://wso2.org/projects/carbon/carbon.xml" xmlns:svns="http://org.wso2.securevault/configuration">

    <!--
       Product Name
    -->
    <Name>${product.name}</Name>

    <!--
       machine readable unique key to identify each product
    -->
    <ServerKey>${product.key}</ServerKey>

    <!--
       Product Version
    -->
    <Version>${product.version}</Version>

    <!--
       Host name or IP address of the machine hosting this server
       e.g. www.wso2.org, 192.168.1.10
       This is will become part of the End Point Reference of the
       services deployed on this server instance.
    -->
    {%if server.hostname is defined %}
    <HostName>{{server.hostname}}</HostName>
     {% endif %}
    <!--
    Host name to be used for the Carbon management console
    -->
     {%if server.mgt_console_hostname is defined %}
    <MgtHostName>{{server.mgt_console_hostname}}</MgtHostName>
     {%elif server.hostname is defined %}
    <MgtHostName>{{server.hostname}}</MgtHostName>
     {% endif %}

    <!--
        The URL of the back end server. This is where the admin services are hosted and
        will be used by the clients in the front end server.
        This is required only for the Front-end server. This is used when seperating BE server from FE server
       -->
    <ServerURL>local:/${carbon.context}/services/</ServerURL>
    <!--
    <ServerURL>https://${carbon.local.ip}:${carbon.management.port}${carbon.context}/services/</ServerURL>
    -->
     <!--
     The URL of the index page. This is where the user will be redirected after signing in to the
     carbon server.
     -->
    <!-- IndexPageURL>/carbon/admin/index.jsp</IndexPageURL-->

    <!--
    For cApp deployment, we have to identify the roles that can be acted by the current server.
    The following property is used for that purpose. Any number of roles can be defined here.
    Regular expressions can be used in the role.
    Ex : <Role>.*</Role> means this server can act any role
    -->
    <ServerRoles>
        <Role>${default.server.role}</Role>
    </ServerRoles>

    <!-- uncommnet this line to subscribe to a bam instance automatically -->
    <!--<BamServerURL>https://bamhost:bamport/services/</BamServerURL>-->

    <!--
       The fully qualified name of the server
    -->
    <Package>org.wso2.carbon</Package>

    <!--
       Webapp context root of WSO2 Carbon management console.
    -->
    <WebContextRoot>/</WebContextRoot>

    <!--
    	Proxy context path is a useful parameter to add a proxy path when a Carbon server is fronted by reverse proxy. In addtion
        to the proxy host and proxy port this parameter allows you add a path component to external URLs. e.g.
     		URL of the Carbon server -> https://10.100.1.1:9443/carbon
   		URL of the reverse proxy -> https://prod.abc.com/appserver/carbon

   	appserver - proxy context path. This specially required whenever you are generating URLs to displace in
   	Carbon UI components.
    -->
    {% if server.proxy_context_path is defined %}
    <MgtProxyContextPath>{{server.proxy_context_path}}</MgtProxyContextPath>
    <ProxyContextPath>{{server.proxy_context_path}}</ProxyContextPath>
    {% endif %}

    {% if server.diagnostic_log_mode is defined %}
    <DiagnosticLogMode>{{server.diagnostic_log_mode}}</DiagnosticLogMode>
    {% endif %}

    <!-- In-order to  get the registry http Port from the back-end when the default http transport is not the same-->
    <!--RegistryHttpPort>9763</RegistryHttpPort-->

    <!--
    Number of items to be displayed on a management console page. This is used at the
    backend server for pagination of various items.
    -->
    <!--This is used as the default items per page-->
    <ItemsPerPage>{{server.default_items_per_page}}</ItemsPerPage>

    <MaximumItemsPerPage>{{server.max_items_per_page}}</MaximumItemsPerPage>

    <!-- The endpoint URL of the cloud instance management Web service -->
    <!--<InstanceMgtWSEndpoint>https://ec2.amazonaws.com/</InstanceMgtWSEndpoint>-->

    <!--
       Ports used by this server
    -->
    <Ports>

        <!-- Ports offset. This entry will set the value of the ports defined below to
         the define value + Offset.
         e.g. Offset=2 and HTTPS port=9443 will set the effective HTTPS port to 9445
         -->
        <Offset>{{server.offset | default('0')}}</Offset>

        <!-- The JMX Ports -->
        <JMX>
            <!--The port RMI registry is exposed-->
            <RMIRegistryPort>{{monitoring.jmx.rmi_registry_port}}</RMIRegistryPort>
            <!--The port RMI server should be exposed-->
            <RMIServerPort>{{monitoring.jmx.rmi_server_port}}</RMIServerPort>
        </JMX>

        <!-- Embedded LDAP server specific ports -->
        <EmbeddedLDAP>
            <!-- Port which embedded LDAP server runs -->
            <LDAPServerPort>10389</LDAPServerPort>
            <!-- Port which KDC (Kerberos Key Distribution Center) server runs -->
            <KDCServerPort>8000</KDCServerPort>
        </EmbeddedLDAP>

	<!--
             Override datasources JNDIproviderPort defined in bps.xml and datasources.properties files
	-->
	<!--<JNDIProviderPort>2199</JNDIProviderPort>-->
	<!--Override receive port of thrift based entitlement service.-->
	<ThriftEntitlementReceivePort>10500</ThriftEntitlementReceivePort>

    <!--
     This is the proxy port of the worker cluster. These need to be configured in a scenario where
     manager node is not exposed through the load balancer through which the workers are exposed
     therefore doesn't have a proxy port.
    <WorkerHttpProxyPort>80</WorkerHttpProxyPort>
    <WorkerHttpsProxyPort>443</WorkerHttpsProxyPort>
    -->

    </Ports>

    <!--
        JNDI Configuration
    -->
    <JNDI>
        <!--
             The fully qualified name of the default initial context factory
        -->
        <DefaultInitialContextFactory>org.wso2.carbon.tomcat.jndi.CarbonJavaURLContextFactory</DefaultInitialContextFactory>
        <!--
             The restrictions that are done to various JNDI Contexts in a Multi-tenant environment
        -->
        <Restrictions>
            <!--
                Contexts that will be available only to the super-tenant
            -->
            <!-- <SuperTenantOnly>
                <UrlContexts>
                    <UrlContext>
                        <Scheme>foo</Scheme>
                    </UrlContext>
                    <UrlContext>
                        <Scheme>bar</Scheme>
                    </UrlContext>
                </UrlContexts>
            </SuperTenantOnly> -->
            <!--
                Contexts that are common to all tenants
            -->
            <AllTenants>
                <UrlContexts>
                    <UrlContext>
                        <Scheme>java</Scheme>
                    </UrlContext>
                    <!-- <UrlContext>
                        <Scheme>foo</Scheme>
                    </UrlContext> -->
                </UrlContexts>
            </AllTenants>
            <!--
                 All other contexts not mentioned above will be available on a per-tenant basis
                 (i.e. will not be shared among tenants)
            -->
        </Restrictions>
    </JNDI>

    <!--
        Property to determine if the server is running an a cloud deployment environment.
        This property should only be used to determine deployment specific details that are
        applicable only in a cloud deployment, i.e when the server deployed *-as-a-service.
    -->
    <IsCloudDeployment>false</IsCloudDeployment>

    <!--
	Property to determine whether usage data should be collected for metering purposes
    -->
    <EnableMetering>false</EnableMetering>

    <!-- The Max time a thread should take for execution in seconds -->
    <MaxThreadExecutionTime>600</MaxThreadExecutionTime>

    <!--
        A flag to enable or disable Ghost Deployer. By default this is set to false. That is
        because the Ghost Deployer works only with the HTTP/S transports. If you are using
        other transports, don't enable Ghost Deployer.
    -->
    <GhostDeployment>
        <Enabled>false</Enabled>
    </GhostDeployment>


    <!--
        Eager loading or lazy loading is a design pattern commonly used in computer programming which
        will initialize an object upon creation or load on-demand. In carbon, lazy loading is used to
        load tenant when a request is received only. Similarly Eager loading is used to enable load
        existing tenants after carbon server starts up. Using this feature, you will be able to include
        or exclude tenants which are to be loaded when server startup.

        We can enable only one LoadingPolicy at a given time.

        1. Tenant Lazy Loading
           This is the default behaviour and enabled by default. With this policy, tenants are not loaded at
           server startup, but loaded based on-demand (i.e when a request is received for a tenant).
           The default tenant idle time is 30 minutes.

        2. Tenant Eager Loading
           This is by default not enabled. It can be be enabled by un-commenting the <EagerLoading> section.
           The eager loading configurations supported are as below. These configurations can be given as the
           value for <Include> element with eager loading.
                (i)Load all tenants when server startup             -   *
                (ii)Load all tenants except foo.com & bar.com       -   *,!foo.com,!bar.com
                (iii)Load only foo.com &  bar.com to be included    -   foo.com,bar.com
    -->
    <Tenant>
        <LoadingPolicy>
            {% if tenant_mgt.eager_loading_tenants is not defined %}
            <LazyLoading>
                <IdleTime>{{tenant_mgt.tenant_idle_timeout | default('30')}}</IdleTime>
            </LazyLoading>
            {% else %}
            <EagerLoading>
                <Include>{{tenant_mgt.eager_loading_tenants}}</Include>
            </EagerLoading>
            {% endif %}
        </LoadingPolicy>

        <!-- Flag to enable or disable tenant deletion -->
        {% if tenant_mgt.tenant_deletion is defined %}
        <TenantDelete>{{tenant_mgt.tenant_deletion}}</TenantDelete>
        {% else %}
        <TenantDelete>false</TenantDelete>
        {% endif %}

        <!-- Flag to enable or disable primary users deletion -->
        {% if tenant_mgt.deletion.primary_users is defined %}
        <DeletePrimaryUsersOnTenantDeletion>{{tenant_mgt.deletion.primary_users}}</DeletePrimaryUsersOnTenantDeletion>
        {% else %}
        <DeletePrimaryUsersOnTenantDeletion>false</DeletePrimaryUsersOnTenantDeletion>
        {% endif %}

        <!-- Configurations related to listener invocation by tenant admin service -->
        <ListenerInvocationPolicy>
            <!-- Flag to enable or disable listener invocation on tenant delete -->
            {% if tenant_mgt.invoke_on_delete is defined %}
            <InvokeOnDelete>{{tenant_mgt.invoke_on_delete}}</InvokeOnDelete>
            {% else %}
            <InvokeOnDelete>false</InvokeOnDelete>
            {% endif %}
        </ListenerInvocationPolicy>
        {% if tenant_mgt.enable_tenant_theme_mgt is defined %}
        <!--   Flag to enable or disable tenant theming for the management console    -->
        <EnableTenantThemeManagement>{{tenant_mgt.enable_tenant_theme_mgt}}</EnableTenantThemeManagement>
        {% endif %}
        {% if tenant_mgt.signing_alg is defined %}
        <!--  Public key certificate signing algorithm for tenants    -->
        <SigningAlgorithm>{{tenant_mgt.signing_alg}}</SigningAlgorithm>
        {% endif %}
    </Tenant>

    <!--
     Caching related configurations
    -->
    <Cache>
        <!-- Default cache timeout in minutes -->
        <DefaultCacheTimeout>{{server.default_cache_timeout}}</DefaultCacheTimeout>
        <DefaultRealmCacheTimeout>{{server.default_realm_cache_timeout}}</DefaultRealmCacheTimeout>
        <!-- Force all caches to act as local -->
        <ForceLocalCache>{{server.force_local_cache}}</ForceLocalCache>
        <DiscardEmptyCaches>{{server.discard_empty_caches}}</DiscardEmptyCaches>
        {% if server.cache.invalidation_impl is defined %}
        <CacheInvalidationImpl>{{server.cache.invalidation_impl}}</CacheInvalidationImpl>
        {% else %}
         <CacheInvalidationImpl>org.wso2.carbon.caching.impl.clustering.ClusterCacheInvalidationRequestSender</CacheInvalidationImpl>
        {% endif %}
        <CachePropagationEnabled>{{server.cache.propagation_enabled}}</CachePropagationEnabled>
    </Cache>

    <!--
    Axis2 related configurations
    -->
    <Axis2Config>
        <!--
             Location of the Axis2 Services & Modules repository

             This can be a directory in the local file system, or a URL.

             e.g.
             1. /home/wso2wsas/repository/ - An absolute path
             2. repository - In this case, the path is relative to CARBON_HOME
             3. file:///home/wso2wsas/repository/
             4. http://wso2wsas/repository/
        -->
        <RepositoryLocation>${carbon.home}/repository/deployment/server/</RepositoryLocation>

        <!--
         Deployment update interval in seconds. This is the interval between repository listener
         executions.
        -->
        <DeploymentUpdateInterval>15</DeploymentUpdateInterval>

        <!--
            Location of the main Axis2 configuration descriptor file, a.k.a. axis2.xml file

            This can be a file on the local file system, or a URL

            e.g.
            1. /home/repository/axis2.xml - An absolute path
            2. conf/axis2.xml - In this case, the path is relative to CARBON_HOME
            3. file:///home/carbon/repository/axis2.xml
            4. http://repository/conf/axis2.xml
        -->
        <ConfigurationFile>${carbon.home}/repository/conf/axis2/axis2.xml</ConfigurationFile>

        <!--
          ServiceGroupContextIdleTime, which will be set in ConfigurationContex
          for multiple clients which are going to access the same ServiceGroupContext
          Default Value is 30 Sec.
        -->
        <ServiceGroupContextIdleTime>30000</ServiceGroupContextIdleTime>

        <!--
          This repository location is used to crete the client side configuration
          context used by the server when calling admin services.
        -->
        <ClientRepositoryLocation>${carbon.home}/repository/deployment/client/</ClientRepositoryLocation>
        <!-- This axis2 xml is used in createing the configuration context by the FE server
         calling to BE server -->
        <clientAxis2XmlLocation>${carbon.home}/repository/conf/axis2/axis2_client.xml</clientAxis2XmlLocation>
        <!-- If this parameter is set, the ?wsdl on an admin service will not give the admin service wsdl. -->
        {% if admin_service.wsdl.enable is sameas true %}
        <HideAdminServiceWSDLs>false</HideAdminServiceWSDLs>
        {% else %}
        <HideAdminServiceWSDLs>true</HideAdminServiceWSDLs>
        {% endif %}

	<!--WARNING-Use With Care! Uncommenting bellow parameter would expose all AdminServices in HTTP transport.
	With HTTP transport your credentials and data routed in public channels are vulnerable for sniffing attacks.
	Use bellow parameter ONLY if your communication channels are confirmed to be secured by other means -->
        <!--HttpAdminServices>*</HttpAdminServices-->

    </Axis2Config>

    <!--
       The default user roles which will be created when the server
       is started up for the first time.
    -->
    <ServiceUserRoles>
        <Role>
            <Name>admin</Name>
            <Description>Default Administrator Role</Description>
        </Role>
        <Role>
            <Name>user</Name>
            <Description>Default User Role</Description>
        </Role>
    </ServiceUserRoles>

    <!--
       Configurations related to Carbon Crypto Service which is a crypto framework used inside Carbon products.
    -->
    <CryptoService>

        <Enabled>true</Enabled>

        <!-- The crypto provider which is used for internal data encryption and decryption -->
        {% if encryption.internal_crypto_provider is defined %}
        <InternalCryptoProviderClassName>{{encryption.internal_crypto_provider}}</InternalCryptoProviderClassName>
        {% else %}
        <InternalCryptoProviderClassName>org.wso2.carbon.crypto.provider.KeyStoreBasedInternalCryptoProvider</InternalCryptoProviderClassName>
        {% endif %}

        {% if encryption.key is defined %}
        <Secret>{{encryption.key}}</Secret>
        {% endif %}

        {% if encryption.enable_key_id is defined %}
        <EnableKeyId>{{encryption.enable_key_id}}</EnableKeyId>
        {% endif %}

        {% if encryption.old_key is defined %}
        <OldSecret>{{encryption.old_key}}</OldSecret>
        {% endif %}

        {% if encryption.totpKey is defined %}
        <TotpSecret>{{encryption.totpKey}}</TotpSecret>
        {% endif %}
        <!--
            The crypto provider which is used for the crypto needs which come when communicating with external parties.
            e.g. Signing, Decrypting.
        -->
        <ExternalCryptoProviderClassName>org.wso2.carbon.core.encryption.KeyStoreBasedExternalCryptoProvider</ExternalCryptoProviderClassName>

        <!--
            The list of key resolvers which will be used based on the context when handling crypto with external parties.

            e.g. Resolving the public key of an external entity.
        -->
        <KeyResolvers>
            <KeyResolver className="org.wso2.carbon.crypto.defaultProvider.resolver.ContextIndependentKeyResolver" priority="-1"/>
        </KeyResolvers>

        <!--
            Uncomment the following configuration to use hardware security module for cryptographic operations.
            Provide configurations as detailed in each tag.
        -->

        <!--
            <HSMBasedCryptoProviderConfig>
                <HSMConfiguration>
                    <PKCS11Module>#AbsolutePathToHSMModule</PKCS11Module>
                    <SlotConfiguration>
                        <Slot id="#SlotID" pin="#UserPIN"/>
                    </SlotConfiguration>
                </HSMConfiguration>

                <InternalProvider>
                    <InternalProviderSlotID>#SlotIDOfInternalProvider</InternalProviderSlotID>
                    <KeyAlias>#KeyAlias</KeyAlias>
                </InternalProvider>

                <ExternalProvider>
                    <ExternalProviderSlotID>#SlotIDOfExternalProvider</ExternalProviderSlotID>
                </ExternalProvider>

                <HSMStore>
                    <Enabled>false</Enabled>
                </HSMStore>
            </HSMBasedCryptoProviderConfig>
        -->
    </CryptoService>

    <!--
      Enable following config to allow Emails as usernames.
    -->
    <EnableEmailUserName>{{tenant_mgt.enable_email_domain | default('false')}}</EnableEmailUserName>
    {% if tenant_mgt.user_info_handler is defined %}
    <UserInfoHandler>{{tenant_mgt.user_info_handler}}</UserInfoHandler>
    {% endif %}
    <!--
      Enable following config to flag input validation configuration.
    -->
    <InputValidationEnabled>{{tenant_mgt.enable_input_validation}}</InputValidationEnabled>
    {% if password_trim.enable is defined %}
      <EnablePasswordTrim>{{password_trim.enable}}</EnablePasswordTrim>
    {% endif %}
    {% if tenant_mgt.disable_email_domain_validation is defined %}
      <DisableEmailUserNameValidation>{{tenant_mgt.disable_email_domain_validation}}</DisableEmailUserNameValidation>
    {% endif %}
    {% if tenant_mgt.enable_tenant_validation_for_nonsaas_username is defined %}
      <EnableTenantValidationForNonSaaSUsername>{{tenant_mgt.enable_tenant_validation_for_nonsaas_username}}</EnableTenantValidationForNonSaaSUsername>
    {% endif %}

    <!--
      Security configurations
    -->
    <Security>
        <!--
            KeyStore which will be used for encrypting/decrypting passwords
            and other sensitive information.
        -->
        <!-- KeyStore configurations for super tenant.-->
        <KeyStore>
            <!-- Keystore file location-->
            <Location>${carbon.home}/repository/resources/security/{{keystore.primary.file_name}}</Location>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>{{keystore.primary.type}}</Type>
            <!-- Keystore password-->
            <Password>{{keystore.primary.password}}</Password>
            <!-- Private Key alias-->
            <KeyAlias>{{keystore.primary.alias}}</KeyAlias>
            <!-- Private Key password-->
            <KeyPassword>{{keystore.primary.key_password}}</KeyPassword>
        </KeyStore>
        <!-- KeyStore configurations for newly created tenants (not applicable to existing tenants). -->
        <TenantKeyStore>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>{{keystore.tenant.type}}</Type>
        </TenantKeyStore>
        <KeyStores>
            <!-- Keystore Data Storage Type (registry/database/hybrid)-->
            <DataStorageType>{{keystores.data_storage_type}}</DataStorageType>
        </KeyStores>


        <!--
            The KeyStore which is used for encrypting/decrypting internal data.
            This block is read by Carbon Crypto Service.
        -->
        <InternalKeyStore>
            <!-- Keystore file location-->
            <Location>${carbon.home}/repository/resources/security/{{keystore.internal.file_name}}</Location>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>{{keystore.internal.type}}</Type>
            <!-- Keystore password-->
            <Password>{{keystore.internal.password}}</Password>
            <!-- Private Key alias-->
            <KeyAlias>{{keystore.internal.alias}}</KeyAlias>
            <!-- Private Key password-->
            <KeyPassword>{{keystore.internal.key_password}}</KeyPassword>
        </InternalKeyStore>

        <!--
            KeyStore which will be used for SAML request/response signing if configured.
            This is only supported for the super tenant ATM.
        -->
        <SAMLSignKeyStore>
            <Location>${carbon.home}/repository/resources/security/{{keystore.saml.file_name}}</Location>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>{{keystore.saml.type}}</Type>
            <!-- Keystore password-->
            <Password>{{keystore.saml.password}}</Password>
            <!-- Private Key alias-->
            <KeyAlias>{{keystore.saml.alias}}</KeyAlias>
            <!-- Private Key password-->
            <KeyPassword>{{keystore.saml.key_password}}</KeyPassword>
        </SAMLSignKeyStore>
        {% if keystore.custom is defined %}

        <CustomKeyStores>
            {% for keystore in keystore.custom %}
            <KeyStore>
                <!-- Keystore file location-->
                <Location>${carbon.home}/repository/resources/security/{{keystore.file_name}}</Location>
                <!-- Keystore type (JKS/PKCS12 etc.)-->
                <Type>{{keystore.type}}</Type>
                <!-- Keystore password-->
                <Password>{{keystore.password}}</Password>
                <!-- Private Key alias-->
                <KeyAlias>{{keystore.alias}}</KeyAlias>
                <!-- Private Key password-->
                <KeyPassword>{{keystore.key_password}}</KeyPassword>
            </KeyStore>
            {% endfor %}
        </CustomKeyStores>
        {% endif %}

        <UserStorePasswordEncryption>{{keystore.userstore_password_encryption}}</UserStorePasswordEncryption>

        <!--
            System wide trust-store which is used to maintain the certificates of all
            the trusted parties.
        -->
        <TrustStore>
            <!-- trust-store file location -->
            <Location>${carbon.home}/repository/resources/security/{{truststore.file_name}}</Location>
            <!-- trust-store type (JKS/PKCS12 etc.) -->
            <Type>{{truststore.type}}</Type>
            <!-- trust-store password -->
            <Password>{{truststore.password}}</Password>
        </TrustStore>

        <!--
            The Authenticator configuration to be used at the JVM level. We extend the
            java.net.Authenticator to make it possible to authenticate to given servers and
            proxies.
        -->
        <NetworkAuthenticatorConfig>
            <!--
                Below is a sample configuration for a single authenticator. Please note that
                all child elements are mandatory. Not having some child elements would lead to
                exceptions at runtime.
            -->
            <!-- <Credential> -->
                <!--
                    the pattern that would match a subset of URLs for which this authenticator
                    would be used
                -->
                <!-- <Pattern>regularExpression</Pattern> -->
                <!--
                    the type of this authenticator. Allowed values are:
                    1. server
                    2. proxy
                -->
                <!-- <Type>proxy</Type> -->
                <!-- the username used to log in to server/proxy -->
                <!-- <Username>username</Username> -->
                <!-- the password used to log in to server/proxy -->
                <!-- <Password>password</Password> -->
            <!-- </Credential> -->
        </NetworkAuthenticatorConfig>

        <!--
         The Tomcat realm to be used for hosted Web applications. Allowed value is UserManager.
         If this is set to 'UserManager', the realm will pick users & roles from the system's
         WSO2 User Manager.
        -->
        <TomcatRealm>UserManager</TomcatRealm>

	<!--Option to disable storing of tokens issued by STS-->
	<DisableTokenStore>false</DisableTokenStore>

    <STSCallBackHandlerName>{{sts.callback_handler}}</STSCallBackHandlerName>
	<!--
	 Security token store class name. If this is not set, default class will be
	 org.wso2.carbon.security.util.SecurityTokenStore
	-->
	<!--TokenStoreClassName>org.wso2.carbon.identity.sts.store.DBTokenStore</TokenStoreClassName-->

        <XSSPreventionConfig>
            <Enabled>true</Enabled>
            <Rule>allow</Rule>
            <Patterns>
                <!--Pattern></Pattern-->
            </Patterns>
        </XSSPreventionConfig>

        {% if sts.signature_algorithm is defined %}
        <STSSignatureAlgorithm>{{sts.signature_algorithm}}</STSSignatureAlgorithm>
        {% endif %}
        {% if sts.digest_algorithm is defined %}
        <STSDigestAlgorithm>{{sts.digest_algorithm}}</STSDigestAlgorithm>
        {% endif %}
    </Security>

    <!--
       The temporary work directory
    -->
    <WorkDirectory>${carbon.home}/tmp/work</WorkDirectory>

    <!--
       House-keeping configuration
    -->
    <HouseKeeping>

        <!--
           true  - Start House-keeping thread on server startup
           false - Do not start House-keeping thread on server startup.
                   The user will run it manually as and when he wishes.
        -->
        <AutoStart>true</AutoStart>

        <!--
           The interval in *minutes*, between house-keeping runs
        -->
        <Interval>10</Interval>

        <!--
          The maximum time in *minutes*, temp files are allowed to live
          in the system. Files/directories which were modified more than
          "MaxTempFileLifetime" minutes ago will be removed by the
          house-keeping task
        -->
        <MaxTempFileLifetime>30</MaxTempFileLifetime>
    </HouseKeeping>

    <!--
       Configuration for handling different types of file upload & other file uploading related
       config parameters.
       To map all actions to a particular FileUploadExecutor, use
       <Action>*</Action>
    -->
    <FileUploadConfig>
        <!--
           The total file upload size limit in MB
        -->
        <TotalFileSizeLimit>{{server.file_upload.file_size_limit}}</TotalFileSizeLimit>
        <Mapping>
            <Actions>
                <Action>dbs</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.DBSFileUploadExecutor</Class>
        </Mapping>
    </FileUploadConfig>

    <!-- FileNameRegEx is used to validate the file input/upload/write-out names.
    e.g.
     <FileNameRegEx>^(?!(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\.[^.])?$)[^&lt;&gt:"/\\|?*\x00-\x1F][^&lt;&gt:"/\\|?*\x00-\x1F\ .]$</FileNameRegEx>
    -->
    <!--<FileNameRegEx></FileNameRegEx>-->

    <!--
       Processors which process special HTTP GET requests such as ?wsdl, ?policy etc.

       In order to plug in a processor to handle a special request, simply add an entry to this
       section.

       The value of the Item element is the first parameter in the query string(e.g. ?wsdl)
       which needs special processing

       The value of the Class element is a class which implements
       org.wso2.carbon.transport.HttpGetRequestProcessor
    -->
    <HttpGetRequestProcessors>
        <Processor>
            <Item>info</Item>
            <Class>org.wso2.carbon.core.transports.util.InfoProcessor</Class>
        </Processor>
        <Processor>
            <Item>wsdl</Item>
            <Class>org.wso2.carbon.core.transports.util.Wsdl11Processor</Class>
        </Processor>
        <Processor>
            <Item>wsdl2</Item>
            <Class>org.wso2.carbon.core.transports.util.Wsdl20Processor</Class>
        </Processor>
        <Processor>
            <Item>xsd</Item>
            <Class>org.wso2.carbon.core.transports.util.XsdProcessor</Class>
        </Processor>
    </HttpGetRequestProcessors>

    <!-- Deployment Synchronizer Configuration. Enable value to true when running with "svn based" dep sync.
	In master nodes you need to set both AutoCommit and AutoCheckout to true
	and in  worker nodes set only AutoCheckout to true.
    -->
    <DeploymentSynchronizer>
        <Enabled>false</Enabled>
        <AutoCommit>false</AutoCommit>
        <AutoCheckout>true</AutoCheckout>
        <RepositoryType>svn</RepositoryType>
        <SvnUrl>http://svnrepo.example.com/repos/</SvnUrl>
        <SvnUser>username</SvnUser>
        <SvnPassword>password</SvnPassword>
        <SvnUrlAppendTenantId>true</SvnUrlAppendTenantId>
    </DeploymentSynchronizer>

    <!-- Mediation persistence configurations. Only valid if mediation features are available i.e. ESB -->
    <!--<MediationConfig>
        <LoadFromRegistry>false</LoadFromRegistry>
        <SaveToFile>false</SaveToFile>
        <Persistence>enabled</Persistence>
        <RegistryPersistence>enabled</RegistryPersistence>
    </MediationConfig>-->

    <!--
    Server intializing code, specified as implementation classes of org.wso2.carbon.core.ServerInitializer.
    This code will be run when the Carbon server is initialized
    -->
    <ServerInitializers>
        <!--<Initializer></Initializer>-->
    </ServerInitializers>

    <!--
    Indicates whether the Carbon Servlet is required by the system, and whether it should be
    registered
    -->
    <RequireCarbonServlet>${require.carbon.servlet}</RequireCarbonServlet>

    <!--Disabling statistics reporter by default-->
    <StatisticsReporterDisabled>true</StatisticsReporterDisabled>

    <!-- Enable accessing Admin Console via HTTP -->
    <!-- EnableHTTPAdminConsole>true</EnableHTTPAdminConsole -->

    <!-- Enable resolving absolute URLs for Admin Console -->
    <AdminConsole>
        <ResolveAbsoluteURLs>
            <Enable>{{admin_console.resolve_absolute_urls.enable}}</Enable>
        </ResolveAbsoluteURLs>
    </AdminConsole>
    <!--
       Default Feature Repository of WSO2 Carbon.
    -->
    <FeatureRepository>
	    <RepositoryName>default repository</RepositoryName>
	    <RepositoryURL>${p2.repo.url}</RepositoryURL>
    </FeatureRepository>

    <!--
	Configure API Management
   -->
   <APIManagement>

	<!--Uses the embedded API Manager by default. If you want to use an external
	API Manager instance to manage APIs, configure below  externalAPIManager-->

	<Enabled>true</Enabled>

	<!--Uncomment and configure API Gateway and
	Publisher URLs to use external API Manager instance-->

	<!--ExternalAPIManager>

		<APIGatewayURL>http://localhost:8281</APIGatewayURL>
		<APIPublisherURL>http://localhost:8281/publisher</APIPublisherURL>

	</ExternalAPIManager-->

	<LoadAPIContextsInServerStartup>true</LoadAPIContextsInServerStartup>
   </APIManagement>

    {% if sts.time_to_live is defined %}
    <STSTimeToLive>{{sts.time_to_live}}</STSTimeToLive>
    {% endif %}
    {% if sts.host_name is defined %}
    <STSHostName>{{sts.host_name}}</STSHostName>
    {% endif %}


    <!-- Configure disable/enable shutdown and restart from the Management Console UI -->

     <disableShutdownRestartFromUI>
        <disableShutdown>{{server.disable_shutdown_from_ui | default('false')}}</disableShutdown>
        <disableRestart>{{server.disable_restart_from_ui | default('false')}}</disableRestart>
     </disableShutdownRestartFromUI>

    <!-- Configure disable/enable server shutdown and restart from API -->

     <enableShutdownRestartFromAPI>
        <enableShutdown>{{server.enable_shutdown_from_api}}</enableShutdown>
        <enableRestart>{{server.enable_restart_from_api}}</enableRestart>
     </enableShutdownRestartFromAPI>

    <!-- Configure password validity period for initially set password -->
    <DefaultPasswordValidityPeriod>{{password.default_validity_period}}</DefaultPasswordValidityPeriod>

    <!-- Configure JCE provider -->
    {% if jce_provider.provider_name is defined %}
        <JCEProvider>{{jce_provider.provider_name}}</JCEProvider>
    {% endif %}

    <!-- Configure SignatureUtil algorithms -->
    <SignatureUtil>
        <EnableSHA256Algo>{{signature_util.enable_sha256_algo}}</EnableSHA256Algo>
    </SignatureUtil>
    <RemoteLogging>
        <ConfigSync>
      	    <Period>{{remote_logging.config_sync.period}}</Period>
        </ConfigSync>
    </RemoteLogging>

    {% if default_management_ui.path is defined %}
    <!-- Configure default management ui path for server -->
    <DefaultManagementUIPath>{{default_management_ui.path}}</DefaultManagementUIPath>
    {% endif %}

    <!-- Configure legacy identity server authorization runtime -->
    <EnableLegacyAuthzRuntime>{{legacy_authz_runtime.enable}}</EnableLegacyAuthzRuntime>

    <!-- Optimize the user search through UIDs in UniqueJDBCUserStore -->
    <JDBCUserStore>
        <enableOptimizedJDBCSearch>{{jdbc_user_store.enable_optimized_jdbc_search}}</enableOptimizedJDBCSearch>
    </JDBCUserStore>

    <!-- Enable/Disable the deprecation banner in the management console -->
    <ManagementConsoleDeprecationBannerEnabled>{{management_console_deprecation_banner.enable}}</ManagementConsoleDeprecationBannerEnabled>

    <!-- Enable/Disable circuit breaker for userstores to ensure backward compatibility -->
    <UserStore>
        <enableCircuitBreakerForUserStores>{{user_store_commons.enable_circuit_breaker_for_user_stores}}</enableCircuitBreakerForUserStores>
        <maxConnectionRetryCount>{{user_store_commons.max_connection_retry_count}}</maxConnectionRetryCount>
        <minConnectionRetryDelayInMilliSeconds>{{user_store_commons.min_connection_retry_delay_in_milli_seconds}}</minConnectionRetryDelayInMilliSeconds>
    </UserStore>
</Server>
